@using AsyncWebAppDemo.Repositories
@model LazyLoadComboDemoModel
@{
    ViewBag.Title = "LazyLoading Demo";
}
<style>    
    ul li:hover {
        background-color: #f00;
        cursor: pointer;
    }

    .dropdown-menu {
        max-height: 200px; /* Adjust height as needed */
        overflow-y: auto;
        display: none; /* Initially hidden */
    }

    .dropdown-toggle:focus + .dropdown-menu,
    .dropdown-menu:hover {
        display: block; /* Show the dropdown on focus or hover */
    }

    #comboboxdiv {
    width: 200px;
    height: auto;
    overflow-y: auto; /* Ensures the select element is scrollable */
}

</style>

<div class="jumbotron">
    <h1>LazyLoading Demo</h1>
    <p class="lead">
        This page is demo how to load records on demand.
        Instead of loading all <span class="text-primary">@ViewBag.TotalNumberProjects</span> records,
        let's load based on user requirement.

        Scroll down the page then you will see that records are added to page.
        It loads @ViewBag.RecordsPerPage records at a time and total no of records is <span class="text-primary">@ViewBag.TotalNumberProjects</span>.
    </p>
</div>

<div id="comboboxdiv">
@Html.DropDownListFor(m => m.ProjectID, Model.ProjectSelectList, "select project", new { id = "combobox" })
</div>

<input id="selectVal" type="hidden" value="" />

<div class="dropdown">
    <button class="dropdown-toggle">Dropdown</button>
    <div class="dropdown-menu" id="dropdownMenu">
        <ul id="dropdownList">
            @foreach (var item in Model.ProjectList)
            {
                <li id=@string.Format("liItem{0}",item.ID) onclick="liItemOnClick(this);">@item.Name</li>
            }            
        </ul>
    </div>
</div>

@section scripts {    
    <script type="text/javascript">

        var page = 0,
            inCallback = false,
            isReachedScrollEnd = false;      

        function scrollHandler() {
            if (isReachedScrollEnd == false &&
                ($("#combobox").scrollTop() <= $("#combobox").height() - $("#combobox").height())) {
                loadMoreItems();
            }
        }

        function listScrollHandler() {
            if (isReachedScrollEnd == false &&
                ($("#dropdownList").scrollTop() <= $("#dropdownList").height() - $("#dropdownList").height())) {
                loadMoreListItems();
            }
        }

        function loadMoreItems() {
            var requestStr = '@Url.Action("GetProjects", "LazyLoadComboDemo")';
            if (page > -1 && !inCallback) {
                inCallback = true;
                page++;

                $.ajax({
                    type: 'GET',
                    url: requestStr,
                    data: "pageNum=" + page,
                    success: function (data, textstatus) {
                        $.each(data, function (i, item) {
                            $('#combobox').append(
                                $('<option>', {
                                    value: item.value,
                                    text: item.text
                            })
                
                            );
                        });
                        inCallback = false;
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(errorThrown);
                    }
                });
            }
        };

        function loadMoreListItems() {
            var requestStr = '@Url.Action("GetProjects", "LazyLoadComboDemo")';
            if (page > -1 && !inCallback) {
                inCallback = true;
                page++;

                $.ajax({
                    type: 'GET',
                    url: requestStr,
                    data: "pageNum=" + page,
                    success: function (data, textstatus) {
                        var ulSelect = document.getElementById("dropdownList");                        
                        $.each(data, function (i, item) {
                            var newLiItem = document.createElement("li");
                            newLiItem.setAttribute("id", "liItem" + item.id);                            
                            newLiItem.setAttribute("onclick", "liItemOnClick(this)");
                            newLiItem.innerHTML = item.name;

                            ulSelect.appendChild(newLiItem);

                        //TO BE REFACTORED TO JQUERY: $('<li id="liItem"'+i+' />', { html: item.name, }).appendTo('#dropdownList');
                        });
                        inCallback = false;
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert(errorThrown);
                    }
                });
            }
        };

        function liItemOnClick(item){
            console.log("clicked list item: "+item.id);
        }
        $(document).ready(function () {     
            //FOUND PROBLEMS ATTACHING SELECT ELEMENT TO SCROLL HANDLER
            //$("#combobox").on('blur', () => { scrollHandler(); });

            var $select = $('#comboboxdiv');
            var lastScrollTop = $select.scrollTop();

            $select.on('scroll', function () {
                var currentScrollTop = $(this).scrollTop();
                if (currentScrollTop !== lastScrollTop) {
                    console.log('User is scrolling inside the select element!');
                    scrollHandler();
                    lastScrollTop = currentScrollTop;
                }
            });

            $('#dropdownMenu').on('scroll', function () {
                console.log('User is scrolling inside the dropdown!');
                listScrollHandler();               
            });
            
        });
        
    </script>
} 